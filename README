SIMI-Qt (Structure Identification in Medical Imaging - Qt)
By Tom Brzozowski, Dan Liew, Bill Papaefstratiou, My Pijika, Wasin Chaivaranont

* Description
---

* BUILDING
1. Make sure cmake is installed
2. Make sure the Qt development libraries and header files are installed.
3. Prepare an simi-qt as an "out of source build" by running

$ mkdir build-dir
$ cd build-dir
$ cmake-gui /path/to/simi-qt-source-root/

Note you can use cmake-gui instead of ccmake if you prefer.
4. Now select the options you want.

DO_SUPERBUILD - 
If you do not have the VTK library installed then the superbuild mode
can build build it for project development
	
	Select from:
	BUILD_VTK

	You will be presented with options that will let you choose your source for
	the libraries. Note this must be a git repository.

If you already have VTK and ITK installed on your system or you have already built them 
using the superbuild then you should disable DO_SUPERBUILD and reconfigure.

SQ_BUILD_TYPE - 
This specifies what the build type should be for the project. Note this has no affect on how the VTK library is built.


5. Generate the makefile from within ccmake or cmake-gui
6. Run
$ make

* Development with QtCreator
Here's how to setup the project to work the QtCreator IDE

1. You need to ensure you have ITK and VTK installed or you have built them previously using "DO_SUPERBUILD".

2. Run the following commands (can use ccmake instead of cmake-gui but if you're using QtCreator you'll probably prefer cmake-gui)

$ cd build-dir/
$ cmake-gui /path/to/simi-qt-source-root/

2. Press "configure".
3. Select "Unix Makefiles" and press "finish".

4. If VTK is installed as a system library cmake should automatically find them. If you built them using "DO_SUPERBUILD" then modify VTK_DIR to point to where it was built.

5. Press "Configure again".
6. Now exit.

7. Launch QtCreator
8. Click on File > Open File or Project
9. Select /path/to/simi-qt-source-root/CMakeLists.txt
10. A "CMake Wizard" dialog will appear. Click "Run CMake".
11. Click finish.

You're done!

COVERAGE INFORMATION
Coverage information can be gathered for unit tests that have been exectued using lcov. Note this requires you to be using the GNU C++ compiler.

Steps
1. Change into the build directory
2. run
$ make help
... all (the default if no target is provided)
... clean
... depend
... edit_cache
... rebuild_cache
... test
... simi-qt
... all_tests
... coverage_clean
... coverage_gen
... ui_tester

3. All targets that have "_tester" as a suffix are unit tests. Build the ones you want and run them once.  If you want to build all tests at once run
$ make all_tests

If you want to run all tests at once then run
$ make test

4. Run the following the generate the coverage information as a HTML document in "build-dir/coverage_html/"
$ make coverage_gen

Note that everything in "build-dir/coverage_html" will be deleted prior to generating the coverage information as a HTML page.

5. To reset the execution counters run
$ make coverage_clean

